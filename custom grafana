Deploying Custom Grafana
The community-powered Grafana cannot be deployed to the existing openshift-monitoring namespace, so we will create a new namespace (i.e. my-monitoring) to deploy into instead.  Navigate to OperatorHub and select the community-powered Grafana Operator.  Press Continue to accept the disclaimer, press Install, and press Subscribe to accept the default configuration values and deploy to the my-monitoring namespace.  Within some time, the Grafana operator will be made available in the my-monitoring namespace.

From Installed Operators, select the Grafana Operator and press Create New Grafana to create a new Grafana instance.

In the Grafana instance YAML, make a note of the default username and password to log in, and press Create.

Connecting Prometheus to our Custom Grafana
The next step is to connect the existing Prometheus in the openshift-monitoring namespace with the community supported Grafana in the my-monitoring namespace.  To do this, configure the prometheus-k8s StatefulSet to listen on all addresses, not just localhost. Navigate to Workloads -> StatefulSets, edit the YAML for the prometheus-k8s StatefulSet by changing '--web.listen-address=127.0.0.1:9090' to '--web.listen-address=:9090', and press Save:

spec:
  template:
    spec:
      containers:
        - name: prometheus
          args:
            - '--web.listen-address=:9090'
            
Customizing Grafana
From the my-monitoring namespace, navigate to Networking -> Routes and click on the Grafana URL to display the custom Grafana user interface.  Click on ‘Sign In’ from the bottom left menu of Grafana, and log in using the default username and password configured earlier.  Now, an editable Grafana interface appears.

Navigate to Configuration -> Data Sources from the menu, press Add Data Source, and select Prometheus.  For the HTTP URL, type in http://prometheus-operated.openshift-monitoring.svc.cluster.local:9090 and you can leave the rest of the configuration values as default.  Press Save and Test to confirm that Grafana is able to connect to the existing Prometheus data source.

Finally, you can create or import a custom Grafana dashboard.
